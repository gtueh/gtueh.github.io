# --- Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt ---
import pandas as pd
import datetime as dt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib.pyplot as plt
import seaborn as sns

# --- B∆∞·ªõc 1: T·∫£i v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ---

# ƒê·ªçc file d·ªØ li·ªáu (ƒë·∫£m b·∫£o file 'OnlineRetail.csv' n·∫±m c√πng th∆∞ m·ª•c)
df = pd.read_csv('OnlineRetail.csv', encoding='ISO-8859-1')

# 1. Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c√≥ m√£ kh√°ch h√†ng
df.dropna(subset=['CustomerID'], inplace=True)

# 2. Lo·∫°i b·ªè c√°c giao d·ªãch tr·∫£ h√†ng (Quantity < 0)
df = df[df['Quantity'] > 0]

# 3. Chuy·ªÉn CustomerID sang ki·ªÉu s·ªë nguy√™n
df['CustomerID'] = df['CustomerID'].astype(int)

# 4. T·∫°o c·ªôt T·ªïng ti·ªÅn (TotalPrice)
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']

# 5. Chuy·ªÉn c·ªôt InvoiceDate sang ki·ªÉu datetime
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], format="%d-%m-%Y %H:%M")

# --- B∆∞·ªõc 2: T√≠nh c√°c ƒë·∫∑c tr∆∞ng RFM (Recency ‚Äì Frequency ‚Äì Monetary) ---

# X√°c ƒë·ªãnh ng√†y ch·ª•p (snapshot_date) l√† ng√†y giao d·ªãch cu·ªëi c√πng + 1 ng√†y
snapshot_date = df['InvoiceDate'].max() + dt.timedelta(days=1)

# Gom nh√≥m theo CustomerID ƒë·ªÉ t√≠nh Recency, Frequency v√† Monetary
rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda date: (snapshot_date - date.max()).days,  # Recency
    'InvoiceNo': 'nunique',                                        # Frequency
    'TotalPrice': 'sum'                                            # Monetary
})

# ƒê·ªïi t√™n c√°c c·ªôt cho d·ªÖ hi·ªÉu
rfm.rename(columns={
    'InvoiceDate': 'Recency',
    'InvoiceNo': 'Frequency',
    'TotalPrice': 'MonetaryValue'
}, inplace=True)

print(rfm.head())

# --- B∆∞·ªõc 3: Chu·∫©n h√≥a d·ªØ li·ªáu ---
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm)

# --- B∆∞·ªõc 4: X√¢y d·ª±ng m√¥ h√¨nh ph√¢n c·ª•m ƒëa c·∫•p (Hierarchical Clustering) ---

# T·∫°o ma tr·∫≠n li√™n k·∫øt b·∫±ng ph∆∞∆°ng ph√°p Ward
linked = linkage(rfm_scaled, method='ward')

# V·∫Ω bi·ªÉu ƒë·ªì Dendrogram
plt.figure(figsize=(14, 8))
dendrogram(linked,
           orientation='top',
           distance_sort='descending',
           show_leaf_counts=True,
           truncate_mode='lastp',   # Hi·ªÉn th·ªã p c·ª•m cu·ªëi c√πng
           p=10                     # ‚úÖ p=10 l√† gi√° tr·ªã t·ªëi ∆∞u cho dataset n√†y
          )
plt.title('Dendrogram Ph√¢n c·ª•m Kh√°ch h√†ng üå≥', fontsize=16)
plt.xlabel('S·ªë l∆∞·ª£ng ƒëi·ªÉm trong c·ª•m', fontsize=13)
plt.ylabel('Kho·∫£ng c√°ch (Ward)', fontsize=13)
plt.show()

# --- B∆∞·ªõc 5: X√¢y d·ª±ng m√¥ h√¨nh Agglomerative Clustering ---
agg_cluster = AgglomerativeClustering(n_clusters=3, linkage='ward')
labels = agg_cluster.fit_predict(rfm_scaled)

# G√°n nh√£n c·ª•m v√†o b·∫£ng RFM
rfm['Cluster'] = labels

# --- B∆∞·ªõc 6: Ph√¢n t√≠ch k·∫øt qu·∫£ ---
cluster_summary = rfm.groupby('Cluster').agg({
    'Recency': 'mean',
    'Frequency': 'mean',
    'MonetaryValue': 'mean'
}).round(2)

print("\nüìä T√≥m t·∫Øt ƒë·∫∑c tr∆∞ng trung b√¨nh c·ªßa c√°c c·ª•m kh√°ch h√†ng:")
print(cluster_summary)

# --- B∆∞·ªõc 7: Tr·ª±c quan h√≥a k·∫øt qu·∫£ ---
plt.figure(figsize=(10, 7))
sns.scatterplot(data=rfm, x='Frequency', y='MonetaryValue',
                hue='Cluster', palette='viridis', s=80)
plt.title('Ph√¢n c·ª•m Kh√°ch h√†ng theo T·∫ßn su·∫•t v√† Gi√° tr·ªã chi ti√™u üõçÔ∏è', fontsize=16)
plt.xlabel('T·∫ßn su·∫•t mua h√†ng (Frequency)', fontsize=12)
plt.ylabel('T·ªïng gi√° tr·ªã chi ti√™u (Monetary)', fontsize=12)
plt.legend(title='Nh√≥m kh√°ch h√†ng')
plt.show()
# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import pandas as pd
import datetime as dt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib.pyplot as plt
import seaborn as sns

# T·∫£i d·ªØ li·ªáu t·ª´ file CSV
# L∆∞u √Ω: ƒê·∫£m b·∫£o file 'OnlineRetail.csv' n·∫±m c√πng th∆∞ m·ª•c v·ªõi code c·ªßa b·∫°n
df = pd.read_csv('OnlineRetail.csv', encoding='ISO-8859-1')
# --- L√†m s·∫°ch d·ªØ li·ªáu ---

# 1. B·ªè c√°c d√≤ng kh√¥ng c√≥ CustomerID
df.dropna(subset=['CustomerID'], inplace=True)

# 2. Lo·∫°i b·ªè c√°c giao d·ªãch tr·∫£ h√†ng (c√≥ Quantity < 0)
df = df[df['Quantity'] > 0]

# 3. Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu CustomerID sang s·ªë nguy√™n
df['CustomerID'] = df['CustomerID'].astype(int)

# 4. T·∫°o c·ªôt 'TotalPrice' = Quantity * UnitPrice
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']

# 5. Chuy·ªÉn ƒë·ªïi c·ªôt 'InvoiceDate' sang ki·ªÉu datetime
# Ta c·∫ßn ch·ªâ ƒë·ªãnh ƒë√∫ng ƒë·ªãnh d·∫°ng ng√†y th√°ng c·ªßa d·ªØ li·ªáu l√† Day-Month-Year
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], format="%d-%m-%Y %H:%M")

print("Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ho√†n t·∫•t.")
# --- K·ªπ thu·∫≠t ƒë·∫∑c tr∆∞ng RFM ---

# 1. L·∫•y ng√†y giao d·ªãch cu·ªëi c√πng trong d·ªØ li·ªáu l√†m m·ªëc
snapshot_date = df['InvoiceDate'].max() + dt.timedelta(days=1)

# 2. Gom nh√≥m theo CustomerID v√† t√≠nh c√°c gi√° tr·ªã R, F, M
rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda date: (snapshot_date - date.max()).days, # Recency
    'InvoiceNo': 'nunique',                                      # Frequency (ƒë·∫øm s·ªë h√≥a ƒë∆°n duy nh·∫•t)
    'TotalPrice': 'sum'                                          # Monetary
})

# 3. ƒê·ªïi t√™n c√°c c·ªôt cho d·ªÖ hi·ªÉu
rfm.rename(columns={'InvoiceDate': 'Recency',
                    'InvoiceNo': 'Frequency',
                    'TotalPrice': 'MonetaryValue'}, inplace=True)

df_rfm = rfm
print("ƒê√£ t·∫°o xong c√°c ƒë·∫∑c tr∆∞ng RFM:")
print(df_rfm.head())

# 4. Chu·∫©n h√≥a d·ªØ li·ªáu RFM
# V√¨ c√°c c·ªôt R, F, M c√≥ thang ƒëo r·∫•t kh√°c nhau, vi·ªác chu·∫©n h√≥a l√† b·∫Øt bu·ªôc
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(df_rfm)
# T·∫°o ma tr·∫≠n li√™n k·∫øt (linkage matrix) b·∫±ng ph∆∞∆°ng ph√°p 'ward'
# 'ward' l√† m·ªôt ph∆∞∆°ng ph√°p ph·ªï bi·∫øn nh·∫±m t·ªëi thi·ªÉu h√≥a ph∆∞∆°ng sai trong m·ªói c·ª•m
linked = linkage(rfm_scaled, method='ward')

# V·∫Ω dendrogram
plt.figure(figsize=(14, 8))
dendrogram(linked,
           orientation='top',
           distance_sort='descending',
           show_leaf_counts=True,
           truncate_mode='lastp', # Ch·ªâ hi·ªÉn th·ªã p c·ª•m cu·ªëi c√πng ƒë∆∞·ª£c h·ª£p nh·∫•t
           p=12 # p=12 gi√∫p bi·ªÉu ƒë·ªì g·ªçn h∆°n
          )
plt.title('Dendrogram Ph√¢n c·ª•m Kh√°ch h√†ng üå≥', fontsize=16)
plt.xlabel('S·ªë l∆∞·ª£ng ƒëi·ªÉm trong c·ª•m', fontsize=14)
plt.ylabel('Kho·∫£ng c√°ch Ward', fontsize=14)
plt.show()
# X√¢y d·ª±ng m√¥ h√¨nh v·ªõi 3 c·ª•m
agg_cluster = AgglomerativeClustering(n_clusters=3, linkage='ward')
labels = agg_cluster.fit_predict(rfm_scaled)

# G√°n nh√£n c·ª•m v·ª´a t√¨m ƒë∆∞·ª£c v√†o l·∫°i DataFrame RFM
df_rfm['Cluster'] = labels
# T√≠nh gi√° tr·ªã RFM trung b√¨nh cho m·ªói c·ª•m
cluster_summary = df_rfm.groupby('Cluster').agg({
    'Recency': 'mean',
    'Frequency': 'mean',
    'MonetaryValue': 'mean'
}).round(2)

print("\n--- ƒê·∫∑c ƒëi·ªÉm trung b√¨nh c·ªßa c√°c c·ª•m ---")
print(cluster_summary)

# Tr·ª±c quan h√≥a c√°c c·ª•m b·∫±ng bi·ªÉu ƒë·ªì ph√¢n t√°n
plt.figure(figsize=(10, 7))
sns.scatterplot(data=df_rfm, x='Frequency', y='MonetaryValue', hue='Cluster', palette='viridis', s=80)
plt.title('Ph√¢n c·ª•m Kh√°ch h√†ng theo T·∫ßn su·∫•t v√† Gi√° tr·ªã ti·ªÅn h√†ng üõçÔ∏è', fontsize=16)
plt.xlabel('T·∫ßn su·∫•t (S·ªë l·∫ßn mua)', fontsize=12)
plt.ylabel('Gi√° tr·ªã ti·ªÅn h√†ng (T·ªïng chi ti√™u)', fontsize=12)
plt.legend(title='Nh√≥m Kh√°ch h√†ng')
plt.show()